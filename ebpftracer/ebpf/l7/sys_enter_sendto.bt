

tracepoint:syscalls:sys_enter_sendto
{
    if (comm == "bpftrace" || comm == "which" || comm == "sleep" || comm == "sshd" || comm == "node") {return;}
    if (comm == "sudo" || comm == "ps" || comm == "git") {return;}
    if (comm == "otelcol-contrib" || comm == "cat" || comm == "containerd" || comm == "all-in-one-linu" || comm == "cpuUsage.sh") {return;}
    if (comm == "multipathd" || comm == "sed" || comm == "dockerd" || comm == "systemd") {return;}

    // printf(" pid:%d", pid);
    // printf(" comm:%s", comm);
    // printf(" size:%d", (args->size));
    // printf(" fd:%d", (args->fd));
    printf(" ubuf:%d", (args->ubuf));
    // printf(" ubuf:%s", str((char *)(args->ubuf)));
    // printf(" ubuf:%r", buf((void *)(args->ubuf)));
    printf(" ubuf:%r", buf(args->ubuf, 30)  );
    // printf(" %d - ", (args->addr_len)[0]);
    // printf(" %d - ", (struct sockaddr * )(args->addr));
    // printf(" fd: %d, ubuf: 0x%08lx, size: %d, flags: %d, addr: 0x%08lx, addr_len: %d\n", ((args->fd)), ((args->ubuf)), ((args->size)), ((args->flags)), ((args->addr)), (*(args->addr_len))); 
    printf("\n");
}
/*
tracepoint:syscalls:sys_enter_recvfrom
    int __syscall_nr
    int fd
    void * ubuf
    size_t size
    unsigned int flags
    struct sockaddr * addr
    int * addr_len
struct sockaddr {
        sa_family_t sa_family;
        char sa_data[14];
};
*/
